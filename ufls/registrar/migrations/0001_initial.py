# Generated by Django 4.2.4 on 2023-10-23 20:03

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import ufls.registrar.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('community', '0008_communitysidebarmenuview_and_more'),
        ('furry', '0001_initial'),
        ('profiles', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='RegistrarLevelLootView',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='Loot ID')),
                ('label', models.TextField(verbose_name='Level Label')),
                ('active', models.BooleanField(verbose_name='Level Active')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Loot Image/Photo')),
                ('loot_label', models.TextField(verbose_name='Loot Label')),
                ('loot_active', models.BooleanField(verbose_name='Loot Active')),
                ('cost', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Loot Cost')),
                ('purchasable', models.BooleanField(verbose_name='Loot Purchasable')),
                ('descr', models.TextField(verbose_name='Loot Descr')),
            ],
            options={
                'db_table': 'ufls_registrar_level_loot_view',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('questions', models.JSONField(default=[])),
                ('openDate', models.DateTimeField(default=datetime.datetime.now)),
                ('closeDate', models.DateTimeField(default=datetime.datetime.now)),
                ('description', models.TextField()),
                ('showOnSidebar', models.BooleanField(default=True, help_text='Shows on Dashboard Sidebar as an Application to submit for')),
                ('showOnHomepage', models.BooleanField(default=True, help_text='Shows to Guests before login on the Homepage.')),
                ('showOnDashboard', models.BooleanField(default=True, help_text='Shows on the dashboard submission tracker on the right-hand side.')),
                ('departmentBelong', models.ForeignKey(blank=True, help_text='If not set, will only be seeable by administrators.', null=True, on_delete=django.db.models.deletion.CASCADE, to='furry.department')),
            ],
            options={
                'db_table': 'ufls_registrar_application',
            },
        ),
        migrations.CreateModel(
            name='ConBadgeLevelMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('regfoxPath', models.CharField(max_length=100)),
                ('regfoxValue', models.CharField(max_length=100)),
                ('stripePrice', models.CharField(max_length=200)),
                ('badgeLevel', models.CharField(max_length=100)),
                ('badgeImageLocation', models.CharField(max_length=250)),
                ('badgeHasMerch', models.BooleanField(default=False, help_text='Badge has Merch.')),
                ('badgeIsCard', models.BooleanField(default=False, help_text='Badge is CR80 sized.')),
            ],
            options={
                'db_table': 'ufls_registrar_conbadgelevelmap',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('active', models.BooleanField(default=False)),
                ('timeLastSync', models.DateTimeField(blank=True, null=True)),
                ('isSecAccessEnabled', models.BooleanField(default=False, help_text='Enables the PocketSec application to be used by PSafe')),
                ('uniqueBadgeNumbers', models.IntegerField(default=1)),
                ('uniqueBadgeNumbersCard', models.IntegerField(default=100)),
                ('banList', models.TextField(blank=True, help_text='Enter a First/Last name, or known Con Badge Name. One entry per line. Security will be notified if this name is detected.', null=True)),
                ('startDate', models.DateField(blank=True, null=True)),
                ('endDate', models.DateField(blank=True, null=True)),
                ('regOpen', models.DateTimeField(default=datetime.datetime.now)),
                ('regClose', models.DateTimeField(default=datetime.datetime.now)),
                ('regEditOpen', models.DateTimeField(default=datetime.datetime.now)),
                ('regEditClose', models.DateTimeField(default=datetime.datetime.now)),
                ('dealersOpen', models.DateTimeField(default=datetime.datetime.now)),
                ('dealersClose', models.DateTimeField(default=datetime.datetime.now)),
                ('aaOpen', models.DateTimeField(default=datetime.datetime.now)),
                ('aaClose', models.DateTimeField(default=datetime.datetime.now)),
                ('eventsOpen', models.DateTimeField(default=datetime.datetime.now)),
                ('eventsClose', models.DateTimeField(default=datetime.datetime.now)),
                ('eventAppCode', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'ufls_registrar_event',
            },
        ),
        migrations.CreateModel(
            name='PrintJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('screenData', models.JSONField(blank=True, null=True)),
                ('resolved', models.BooleanField(default=False)),
                ('timeCreated', models.DateTimeField(auto_now_add=True)),
                ('timeCompleted', models.DateTimeField(auto_now=True)),
                ('handling', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'ufls_registrar_print_job',
            },
        ),
        migrations.CreateModel(
            name='RegistrantLevel',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('level_id', models.TextField(max_length=200, verbose_name='Level ID')),
                ('label', models.TextField(max_length=200, verbose_name='Level Label')),
                ('active', models.BooleanField(default=True, verbose_name='Level Active Flag')),
                ('cost', models.DecimalField(decimal_places=2, default=65, max_digits=10, verbose_name='Level Cost')),
                ('sold', models.IntegerField(default=0, verbose_name='Current Count Sold')),
                ('max', models.IntegerField(default=1000, verbose_name='Max Sellable Count')),
                ('limit_to_max_sales', models.BooleanField(default=False, verbose_name='Limit sales to specified max ticket #')),
                ('stripe_price', models.TextField(max_length=200, verbose_name='Level Stripe Price ID')),
                ('stripe_price_test', models.TextField(max_length=200, verbose_name='Level Stripe Test Price ID')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registrar.event')),
            ],
            options={
                'db_table': 'ufls_registrar_registrant_level',
            },
        ),
        migrations.CreateModel(
            name='RegistrationLoot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level_id', models.TextField(max_length=200, verbose_name='Loot ID')),
                ('label', models.TextField(max_length=200, verbose_name='Loot Label')),
                ('descr', models.TextField(verbose_name='Loot Description')),
                ('active', models.BooleanField(default=True, verbose_name='Loot Active Flag')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Loot Image/Photo')),
                ('purchasable', models.BooleanField(default=True, verbose_name='Loot Available for Direct Purchase')),
                ('customisable', models.BooleanField(default=False, verbose_name='Loot Can be Customisable')),
                ('options', models.JSONField(blank=True, null=True, verbose_name='Customisation options')),
                ('cost', models.FloatField(default=65, verbose_name='Loot Cost')),
                ('sold', models.IntegerField(default=0, verbose_name='Current Count Sold')),
                ('max', models.IntegerField(default=1000, verbose_name='Max Sellable Count')),
                ('limit_to_max_sales', models.BooleanField(default=False, verbose_name='Limit sales to specified max count #')),
                ('stripe_price', models.TextField(max_length=200, verbose_name='Level Stripe Price ID')),
                ('stripe_price_test', models.TextField(max_length=200, verbose_name='Level Stripe Test Price ID')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registrar.event')),
            ],
            options={
                'db_table': 'ufls_registrar_registration_loot',
            },
        ),
        migrations.CreateModel(
            name='RegistrationLevelLoot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost', models.IntegerField(default=65, verbose_name='Loot Cost')),
                ('count', models.IntegerField(default=1, verbose_name='Item Count')),
                ('active', models.BooleanField(default=True, verbose_name='Loot Active Flag')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registrar.event')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registrar.registrationloot', verbose_name='Registration Loot Item')),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registrar.registrantlevel', verbose_name='Registration Level')),
            ],
            options={
                'db_table': 'ufls_registrar_registration_level_loot',
            },
        ),
        migrations.CreateModel(
            name='RegistrantData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('isCustomPicture', models.BooleanField(default=False)),
                ('customUploadPicture', models.ImageField(blank=True, null=True, upload_to=ufls.registrar.models.upload_path_image)),
                ('croppedImage', models.ImageField(blank=True, null=True, upload_to=ufls.registrar.models.upload_cropped_image_path)),
                ('rId', models.CharField(blank=True, help_text='Regfox ID', max_length=50, null=True)),
                ('rUUID', models.UUIDField(blank=True, help_text='Internal Registrar UUID', null=True)),
                ('displayId', models.CharField(blank=True, max_length=100, null=True)),
                ('formId', models.CharField(blank=True, max_length=100, null=True)),
                ('formName', models.CharField(blank=True, max_length=100, null=True)),
                ('formAccRef', models.CharField(blank=True, max_length=100, null=True)),
                ('orderCustomerId', models.CharField(blank=True, max_length=100, null=True)),
                ('customerId', models.CharField(blank=True, max_length=100, null=True)),
                ('orderId', models.CharField(blank=True, max_length=100, null=True)),
                ('orderDisplayId', models.CharField(blank=True, max_length=100, null=True)),
                ('orderNumber', models.CharField(blank=True, max_length=100, null=True)),
                ('orderEmail', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(blank=True, max_length=100, null=True)),
                ('total', models.CharField(blank=True, max_length=100, null=True)),
                ('amount', models.CharField(blank=True, max_length=100, null=True)),
                ('outstandingAmount', models.CharField(blank=True, max_length=100, null=True)),
                ('currency', models.CharField(blank=True, max_length=100, null=True)),
                ('fieldData', models.JSONField(blank=True, null=True)),
                ('metadata', models.CharField(blank=True, max_length=100, null=True)),
                ('checkedIn', models.BooleanField(default=False)),
                ('dateCreated', models.CharField(blank=True, max_length=100, null=True)),
                ('dateUpdated', models.CharField(blank=True, max_length=100, null=True)),
                ('conCheckedIn', models.BooleanField(default=False)),
                ('conCheckedInDate', models.DateTimeField(blank=True, null=True)),
                ('conCreepFlag', models.BooleanField(default=False)),
                ('conBanFlag', models.BooleanField(default=False)),
                ('conRegNotes', models.TextField(blank=True, null=True)),
                ('conBadgeNumber', models.CharField(blank=True, max_length=100, null=True)),
                ('conFirstName', models.CharField(blank=True, max_length=100, null=True)),
                ('conLastName', models.CharField(blank=True, max_length=100, null=True)),
                ('conEmail', models.CharField(blank=True, max_length=100, null=True)),
                ('conDOB', models.CharField(blank=True, max_length=100, null=True)),
                ('conBadgeName', models.CharField(blank=True, max_length=100, null=True)),
                ('conIsStaff', models.BooleanField(default=False)),
                ('conIsDealer', models.BooleanField(default=False)),
                ('conIsDealerAssistant', models.BooleanField(default=False)),
                ('conStaffDepartment', models.CharField(blank=True, max_length=100, null=True)),
                ('conCustomBadgeLevel', models.CharField(blank=True, max_length=100, null=True)),
                ('hasMealPlan', models.BooleanField(default=False)),
                ('vetoBadgePic', models.BooleanField(default=False)),
                ('isForwarding', models.BooleanField(default=False)),
                ('generatedViaWebhook', models.BooleanField(default=False)),
                ('accessibility', models.BooleanField(default=False)),
                ('a11yPartialAssist', models.BooleanField(default=False)),
                ('a11yFullAssist', models.BooleanField(default=False)),
                ('a11yEyesight', models.BooleanField(default=False)),
                ('a11yChair', models.BooleanField(default=False)),
                ('a11yElevator', models.BooleanField(default=False)),
                ('a11yGroup', models.BooleanField(default=False)),
                ('a11yNotes', models.TextField(blank=True, null=True)),
                ('a11yEvents', models.TextField(blank=True, null=True)),
                ('conRegLevel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='registrar.conbadgelevelmap')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='registrar.event')),
                ('profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='profiles.profile')),
            ],
            options={
                'db_table': 'ufls_registrar_registrant_data',
            },
        ),
        migrations.CreateModel(
            name='Registrant',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('firstName', models.CharField(max_length=100, verbose_name='First Name: ')),
                ('lastName', models.CharField(max_length=100, verbose_name='Last Name: ')),
                ('email', models.CharField(max_length=100, verbose_name='Email: ')),
                ('phone', models.CharField(max_length=20, verbose_name='Phone #: ')),
                ('addr1', models.CharField(max_length=100, verbose_name='Address Line 1: ')),
                ('addr2', models.CharField(blank=True, max_length=100, verbose_name='Address Line 2: ')),
                ('country', models.CharField(max_length=100, verbose_name='Country: ')),
                ('city', models.CharField(max_length=100, verbose_name='City: ')),
                ('state', models.CharField(max_length=10, verbose_name='State/Province: ')),
                ('zip', models.CharField(max_length=10, verbose_name='Address Zip/Post Code: ')),
                ('dob', models.DateField(verbose_name='Date of Birth: ')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created: ')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Updated: ')),
                ('fdDonation', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Furrydelphia Donation: ')),
                ('chDonation', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Charity Donation: ')),
                ('badgeName', models.CharField(max_length=100, verbose_name='Badge Name: ')),
                ('agreeCOC', models.BooleanField(default=False, verbose_name='Agreed to Code of Conduct')),
                ('agreeCOCDate', models.DateTimeField(blank=True, null=True, verbose_name='Agreed to Code of Conduct Date')),
                ('agreeRFP', models.BooleanField(default=False, verbose_name=' Agreed Refund Policy')),
                ('agreeRFPDate', models.DateTimeField(blank=True, null=True, verbose_name='Agreed to Refund Policy Date')),
                ('agreeCVD', models.BooleanField(default=False, verbose_name=' Agreed to the COVID Policy')),
                ('agreeCVDDate', models.DateTimeField(blank=True, null=True, verbose_name='Agreed to COVID Policy Date')),
                ('paid', models.BooleanField(default=False, verbose_name='Paid')),
                ('paidDate', models.DateTimeField(blank=True, null=True, verbose_name='Payment Date')),
                ('total', models.CharField(blank=True, max_length=100, null=True, verbose_name='Total')),
                ('amount', models.CharField(blank=True, max_length=100, null=True, verbose_name='Amount')),
                ('outstandingAmount', models.CharField(blank=True, max_length=100, null=True, verbose_name='Outstanding Amount')),
                ('currency', models.CharField(blank=True, default='USD', max_length=3, null=True, verbose_name='Currency')),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='registrar.registrantlevel', verbose_name='Registrant Level: ')),
                ('profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='profiles.profile', verbose_name='Registrant Profile: ')),
            ],
            options={
                'db_table': 'ufls_registrar_registrant',
            },
        ),
        migrations.AddField(
            model_name='conbadgelevelmap',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registrar.event'),
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(default='NEW', max_length=50)),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='registrar.event')),
                ('registrant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registrar.registrantdata')),
            ],
            options={
                'db_table': 'ufls_registrar_badge',
            },
        ),
        migrations.CreateModel(
            name='ApplicationSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submission_details', models.JSONField(default=[])),
                ('dateEntered', models.DateTimeField(auto_now_add=True)),
                ('disposition', models.CharField(choices=[('Submitted', 'Submitted'), ('Under Review', 'Under Review'), ('Declined', 'Declined'), ('Approved', 'Approved')], default='Submitted', max_length=20)),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registrar.application')),
                ('submitted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ufls_registrar_application_sumbmission',
            },
        ),
        migrations.AddField(
            model_name='application',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registrar.event'),
        ),
        migrations.CreateModel(
            name='EventCommunityMapping',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=True, verbose_name='Active')),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='community.community', verbose_name='Community')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registrar.event', verbose_name='Event')),
            ],
            options={
                'db_table': 'ufls_registrar_event_community_mapping',
                'unique_together': {('event', 'community')},
            },
        ),
    ]
