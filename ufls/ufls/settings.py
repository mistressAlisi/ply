"""
Django settings for ufls project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta

import sentry_sdk
from django.core.exceptions import DisallowedHost
from sentry_sdk.integrations.django import DjangoIntegration

from decouple import config,Csv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/


SECRET_KEY = config("UFLS_SECRET_KEY", default="no")

DEBUG = config('UFLS_DEBUG', cast=bool, default=False)

ALLOWED_HOSTS = config('UFLS_ALLOWED_HOSTS', cast=Csv(), default="")

DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760
# PAYMENT PROCESSING:
PAYMENT_HOST = config('UFLS_PAYMENT_HOST', default="http://localhost:8000/")
PAYMENT_USES_SSL = config("UFLS_PAYMENTS_USES_SSL", default=False)
PAYMENT_STRIPE_WEBHOOK_SECRET = config("UFLS_STRIPE_WEBHOOK_SECRET",default="")
PAYMENT_STRIPE_TEST = config('UFLS_STRIPE_TEST', cast=bool, default=True)
if (PAYMENT_STRIPE_TEST == True):
    PAYMENT_STRIPE_PUBLIC_KEY = config('UFLS_PAYMENT_PUBKEY_TEST', default=False)
    PAYMENT_STRIPE_SECRET_KEY = config('UFLS_PAYMENT_SECKEY_TEST', default=False)
    PAYMENT_STRIPE_DONATION_ITEM = config('UFLS_PAYMENT_DONATION_ITEM_TEST', default=False)
else:
    PAYMENT_STRIPE_PUBLIC_KEY = config('UFLS_PAYMENT_PUBKEY', default=False)
    PAYMENT_STRIPE_SECRET_KEY = config('UFLS_PAYMENT_SECKEY', default=False)
    PAYMENT_STRIPE_DONATION_ITEM = config('UFLS_PAYMENT_DONATION_ITEM', default=False)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_bootstrap5',
    'rest_framework',
    'rest_framework.authtoken',
    'django_auth_oidc',
    'corsheaders',
    'import_export',
    'channels',
    'connections.apps.ConnectionsConfig',
    'furry.apps.FurryConfig',
    'registration.apps.RegistrationConfig',
    'inventory.apps.InventoryConfig',
    'actions.apps.ActionsConfig',
    'utility.apps.UtilityConfig',
    'marketplace.apps.MarketplaceConfig',
    'event.apps.EventConfig',
    'django_celery_results',
    'django_celery_beat',
    'rest_framework_simplejwt',
    'multiselectfield',
    'staff',
    'staff_onboarding',
    'staff_frontend',
    'oauth2_provider',
    'registrar',
    'foauth.apps.FoauthConfig'
]

with open('oidc.key', 'r') as file:
    dkey = file.read()

OAUTH2_PROVIDER = {
    "OIDC_ENABLED": True,
    "OIDC_RSA_PRIVATE_KEY": dkey,
    "SCOPES": {
        "openid": "OpenID Connect scope",
        "name": "Name",
        "email": "Email",
        'read': 'Read scope', 'write': 'Write scope', 'groups': 'Access to your groups'
        # ... any other scopes that you use
    },
    "OAUTH2_VALIDATOR_CLASS": "ufls.oauth2validators.CustomOAuth2Validator",
    "PKCE_REQUIRED": False
}

ASGI_APPLICATION = "ufls.asgi.application"

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=1440),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=3),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

CELERY_RESULT_BACKEND = 'django-db'
CELERY_CACHE_BACKEND = 'default'
CELERY_BROKER_URL = config("UFLS_CELERY_BROKER_URL", default="")
CELERY_TIMEZONE = "America/New_York"
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60

CELERY_TASK_ROUTES = {
 'registration.tasks.*': {'queue': 'celery'},
 'bkinterface.*': {'queue': 'bkinterface'},
 'printmaster.*': {'queue': 'printmaster'},
 'brotherlabel.*': {'queue': 'brotherlabel'},
 'receiptmanager.*': {'queue': 'receiptmanager'},
 'badgerenderer.*': {'queue': 'badgerenderer'}
}

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CSRF_TRUSTED_ORIGINS = [
    'http://backend.furrydelphia.org',
    'https://backend.furrydelphia.org',
]

CORS_ALLOWED_ORIGINS = config('UFLS_CORS_ALLOWED_ORIGINS', cast=Csv(), default="")

DEFAULT_FILE_STORAGE = 'storages.backends.azure_storage.AzureStorage'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

AZURE_ACCOUNT_NAME = "furrydelphiapublic"
AZURE_ACCOUNT_KEY = "LlsjOxlOp8lcukF3Dy5jIeeAUftpiI7CV7pLD9/1aV/anBGohvqacVgXIqpMsT82zSybUQEunJ+XgT2hEcrSeA=="
AZURE_CONTAINER = "ufls"

ROOT_URLCONF = 'ufls.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'ufls.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': config('UFLS_DB_ENGINE', default=""),
        'NAME': config('UFLS_DB_NAME', default=""),
        'USER': config('UFLS_DB_USER', default=""),
        'PASSWORD': config('UFLS_DB_PW', default=""),
        'HOST': config('UFLS_DB_HOST', default=""),
        'PORT': config('UFLS_DB_PORT', default="")
    }
}



# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
LOGIN_URL = '/app/auth/login/'


AUTH_SERVER = config("UFLS_AUTH_SERVER", default="")
AUTH_CLIENT_ID = config("UFLS_AUTH_CLIENT_ID", default="")
AUTH_CLIENT_SECRET = config("UFLS_AUTH_CLIENT_SECRET", default="")

AUTH_SCOPE = ['openid', 'email', 'profile']

AUTHENTICATION_BACKENDS = [
	#'django.contrib.auth.backends.RemoteUserBackend',
	#'dealers.backends.CaseInsensitiveModelBackend',
	'django.contrib.auth.backends.ModelBackend',
]


AUTH_GET_USER_FUNCTION = "ufls:get_user_by_username_custom"
ALLOWED_REDIRECTION_HOSTS = [
    'backend.furrydelphia.org',
    'ufls.furrydelphia.org',
    'dashboard.furrydelphia.org',
    'marketplace.furrydelphia.org',
    'oube.fdel.fi',
    'ou.fdel.fi',
    'reg.fdel.fi',
    'ufls-ui.pages.dev',
    'regapp.furrydelphia.org',
    'regpad.furrydelphia.org',
]

# EMAIL CONFIG:
EMAIL_HOST = config("UFLS_EMAIL_HOST", default="")
EMAIL_HOST_USER = config("UFLS_EMAIL_HOST_USER", default="")
EMAIL_HOST_PASSWORD = config("UFLS_EMAIL_HOST_PASSWORD", default="")
EMAIL_PORT = config("UFLS_EMAIL_PORT", default="")
DEFAULT_FROM_EMAIL = config("UFLS_DEFAULT_FROM_EMAIL", default="")
EMAIL_USE_TLS = config("UFLS_EMAIL_USE_TLS", default=True, cast=bool)
EMAIL_USE_SSL = config("UFLS_EMAIL_USE_SSL", default=False, cast=bool)

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [config("UFLS_REDIS_URL", default="")],
        },
    },
}

def before_send(event, hint):
    if 'exc_info' in hint:
        exc_type, exc_value, tb = hint['exc_info']
        if isinstance(exc_value, (DisallowedHost)):
            return None
    return event

sentry_sdk.init(
    dsn="https://9bdb7249c59c4fa9b17f831f3d4a7614@o1057759.ingest.sentry.io/4504480945733632",
    integrations=[DjangoIntegration()],

    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for performance monitoring.
    # We recommend adjusting this value in production.
    traces_sample_rate=1.0,

    # If you wish to associate users to errors (assuming you are using
    # django.contrib.auth) you may enable sending PII data.
    send_default_pii=True,
    before_send=before_send
)


USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

#must be at bottom
#django_heroku.settings(locals())
